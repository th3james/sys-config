  " Somewhat copied from https://github.com/spf13/spf13-vim/blob/master/.vimrc
  set nocompatible          " We're running Vim, not Vi!
  filetype off                   " required!

  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#begin()

  " let Vundle manage Vundle
  " required! 
  Plugin 'VundleVim/Vundle.vim'

  " My Bundles here:
  "
  " original repos on github
  Bundle 'tpope/vim-rails.git'
  Bundle 'scrooloose/nerdtree'
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'briancollins/vim-jst'
  Bundle 'ervandew/supertab.git'
  Bundle 'kien/ctrlp.vim.git'
  "Bundle 'thoughtbot/vim-rspec'
  Bundle 'rust-lang/rust.vim'
  "Bundle 'keith/swift.vim'
  Bundle 'yodiaditya/vim-pydjango.git'
  Bundle 'nvie/vim-flake8'
  Bundle 'janko-m/vim-test'
  Bundle 'Shutnik/jshint2.vim'
  Bundle 'benmills/vimux'

  Bundle 'plasticboy/vim-markdown'
  let g:vim_markdown_folding_disabled=1

  " vim-scripts repos
  Bundle 'L9'
  " non github repos
  "Bundle 'git://github.com/wikitopian/hardmode.git'
  " ...

  call vundle#end()

  filetype plugin indent on     " required!
  "
  " Brief help
  " :BundleList          - list configured bundles
  " :BundleInstall(!)    - install(update) bundles
  " :BundleSearch(!) foo - search(or refresh cache first) for foo
  " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
  "
  " see :h vundle for more details or wiki for FAQ
  " NOTE: comments after Bundle command are not allowed..

  " UI stuff
  set t_Co=256

  syntax on                 " Enable syntax highlighting
  set background=dark       " Assume a dark background
  color ir_black

  set backspace=indent,eol,start	" backspace for dummys
  set linespace=0		        " No extra spaces between rows
  set nu                                " Line numbers on
  set showmatch                         " show matching brackets/parenthesis
  set incsearch	                        " find as you type search
  set hlsearch	                        " highlight search terms
  set winminheight=0                    " windows can be 0 line high 
  set ignorecase			" case insensitive search
  set smartcase                         " case sensitive when uc present
  set wildmenu                          " show list instead of just completing
  set wildmode=list:longest,full        " command <Tab> completion, list matches, then longest common part, then all.
  set whichwrap=b,s,h,l,<,>,[,]	        " backspace and cursor keys wrap to
  set scrolljump=5                      " lines to scroll when cursor leaves screen
  set scrolloff=3                       " minimum lines to keep above and below cursor
  set foldenable                        " auto fold code
  set gdefault                          " the /g flag on :s substitutions by default

  "set spell                 " spell checking on
  set undofile              " Persistent undo (across files)
  

  " Load matchit (% to bounce from do to end, etc.)
  runtime! macros/matchit.vim

  augroup myfiletypes
    " Clear old autocmds in group
    autocmd!
    " autoindent with two spaces, always expand tabs
    autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
  augroup END

  set hidden " allow hiding buffers with changes

  set autoindent
  set smarttab
  set expandtab

  set ai sw=2 sts=2 et

  " Force windows to be 80 char wide
  set numberwidth=4
  set winwidth=84
 
  "set omnifunc=csscomplete#CompleteCSS 
  
  " enable hard mode
  "autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

  " CtrlPTag on .
  "nnoremap <leader>. :CtrlPTag<CR>
  "nnoremap <leader>/ :!ctags -R

  " The Silver Searcher
  if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  endif

  " vim-test setup
  nmap <silent> <leader>t :TestNearest<CR>
  nmap <silent> <leader>T :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>

  let test#strategy = "vimux"

  " Example docker transform
  "function! DockerTransform(cmd) abort
  "  return 'docker-compose run app '.a:cmd
  "endfunction

  "let g:test#custom_transformations = {'docker': function('DockerTransform')}
  "let g:test#transformation = 'docker'

  "let test#python#runner = 'pytest'

  " Make shortcut
  nnoremap <Leader>r :VimuxRunCommand('make')<CR>
  nnoremap <Leader>u :VimuxRunCommand('make test')<CR>

  " jk instead of esc
  imap jk <Esc>
  "
  " Toggle HardMode
  "map <Leader>e :call EasyMode()<CR>

  " Make shortcut
  nnoremap <silent><F6> :JSHint<CR>

  " load project specific .vimrc files
  set exrc
  " This prevents project specific .vimrc files doing anything dangerous
  set secure
